package com.orchestranetworks.geomatch.match;

import java.io.IOException;
import java.util.HashMap;

import com.onwbp.adaptation.Adaptation;
import com.onwbp.adaptation.AdaptationName;
import com.onwbp.adaptation.XPathExpressionHelper;
import com.orchestranetworks.instance.HomeKey;
import com.orchestranetworks.instance.Repository;
import com.orchestranetworks.instance.ValueContext;
import com.orchestranetworks.schema.Path;
import com.orchestranetworks.service.OperationException;
import com.orchestranetworks.service.Session;
import com.orchestranetworks.geomatch.match.AddressConverter;
import com.orchestranetworks.geomatch.procedure.ModifyValuesProcedure;
import com.orchestranetworks.workflow.DataContextReadOnly;
import com.orchestranetworks.workflow.ScriptTaskBean;
import com.orchestranetworks.workflow.ScriptTaskBeanContext;

public class CarmenSandiago extends ScriptTaskBean {

	// Adaptation record = getTable(Paths.get(/*address table goes in here?*/));
	public final static Adaptation GeomatchDataset = Repository.getDefault()
			.lookupHome(HomeKey.forBranchName("Geomatch")).findAdaptationOrNull(AdaptationName.forName("Geomatch"));
	public static Double lat = 0.0;
	public static Double lng = 0.0;
	public static Coordinate coord = new Coordinate(lng,lat);
/*
 * initializing some variables used throughout the code
 */

	public static Adaptation lookUpRecord(ValueContext vc) {
		Adaptation returnable = null;
		try {
			//vc.getAdaptationTable()
			returnable = GeomatchDataset.getTable(vc.getAdaptationTable().getTablePath())
					.lookupAdaptationByPrimaryKey(vc);
		} catch (Exception e) {
			System.err.println("Could not look up record in Geomatch database.");
			e.printStackTrace();
		}
		return returnable;
	}
	//Looks up the record lol

	/**
	 * Get a record based on the xpath.
	 * 
	 * @see XPathExpressionHelper.lookupFirstRecordMatchingXPath(boolean,
	 *      Adaptation, String)
	 *
	 * @param recordXpath
	 *            the xpath
	 * @param dataSet
	 *            the data set
	 * @param checkActualPrimaryKey
	 *            Whether the xpath specifies each member of the primary key,
	 *            for faster lookup
	 * @param errorIfNotFound
	 *            Whether to consider not found to be an error
	 * @throws OperationException
	 *             if an error occurs, or if not found and
	 *             <code>errorIfNotFound</code> is <code>true</code>
	 */
	public static Adaptation getRecord(String recordXpath, Adaptation dataSet, boolean checkActualPrimaryKey,
			boolean errorIfNotFound) throws OperationException {
		if (recordXpath == null || dataSet == null) {
			return null;
		}
		Adaptation recordAdaptation = XPathExpressionHelper.lookupFirstRecordMatchingXPath(checkActualPrimaryKey,
				dataSet, recordXpath);
		if (recordAdaptation == null && errorIfNotFound) {
			throw OperationException.createError("Record for '" + recordXpath + "' has not been found");
		}
		return recordAdaptation;
	}
	// Get the address from the table
	// the address is a string, so I'll be passing the string to the method
	// send the address to AddressConverter.

	/*public static void convertToLat(String address) throws NumberFormatException, IOException {
		Double latty = Double.parseDouble(AddressConverter.ResLat(address));
		lat = latty;
	}
	//converts given address value to the corresponding latitude value

	public static void convertToLng(String address) throws NumberFormatException, IOException {
		// AddressConverter add = new AddressConverter();
		Double lg = Double.parseDouble(AddressConverter.ResLng(address));
		lng = lg;
	}
	//converts the given address value to its corresponding longitude value
	*/

	//get lat and long as back as a single thing or make them into coordinate object
	
	
	//new method "create a coordinate"
	public static void createCoordinate(String address) throws NumberFormatException, IOException{
		Double lg = Double.parseDouble(AddressConverter.ResLng(address));
		lng = lg;
		Double latty = Double.parseDouble(AddressConverter.ResLat(address));
		lat = latty;
		coord.setY(lng);
		
		
	}


	/*
	 * // String geoID = a.getString(Path.parse("Latitude"));
		// path to take^
	 */

	void updateDataValue(final Adaptation a, Session s) {
		final HashMap<Path, Object> pathValueMap = new HashMap<>();
		pathValueMap.put(Path.parse("Latitude"), coord.getY());
		pathValueMap.put(Path.parse("Longitude"), lng);
		try {
			ModifyValuesProcedure.execute(a, pathValueMap, s);
		} catch (Exception e) {
			System.err.println(e);
		}
	}
	//can do both at once yay
	/*
	 * Well I have no idea what the below is about, but the above method updates the longitude value. 
	 * (non-Javadoc)
	 * @see com.orchestranetworks.workflow.ScriptTaskBean#executeScript(com.orchestranetworks.workflow.ScriptTaskBeanContext)
	 */


	@Override
	public void executeScript(ScriptTaskBeanContext context) throws OperationException {
		DataContextReadOnly dc = context.getProcessInstance().getDataContext();
		Adaptation a = getRecord(dc.getVariableString("record"), GeomatchDataset, true, true);
		Session s = context.getSession();
		String address = a.getString(Path.parse("Address"));
		try {
			convertToLat(address);
			convertToLng(address);
		} catch (NumberFormatException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		updateDataValue(a, s);
		
	}
	/*
	 * ^Basically the script's main method where everything is called. get to
	 * the table Then, get the address from the table Then put Lat/Long back in
	 * the table. key is the path inside of the adaptation /lat /lng
	 * Path.parse("Latitude");
	 */

}
