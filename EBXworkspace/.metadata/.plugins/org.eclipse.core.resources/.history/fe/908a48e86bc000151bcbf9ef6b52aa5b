package com.orchestranetworks.geomatch.match;



import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.text.DecimalFormat;
import java.text.ParseException;

import org.codehaus.jackson.map.ObjectMapper;

/**
 * 
 * 
 * @author Abhishek Somani
 * @author Susannah Darling
 * 
 */
public class AddressConverter {
	/*
	 * Geocode request URL. Here see we are passing "json" it means we will get
	 * the output in JSON format. You can also pass "xml" instead of "json" for
	 * XML output. For XML output URL will be
	 * "http://maps.googleapis.com/maps/api/geocode/xml";
	 */
	

	private static final String URL = "http://maps.googleapis.com/maps/api/geocode/json";

	/*
	 * Here the fullAddress String is in format like
	 * "address,city,state,zipcode". Here address means "street number + route"
	 * .
	 */
	
	/*
	 * Create an java.net.URL object by passing the request URL in
	 * constructor. Here you can see I am converting the fullAddress String
	 * in UTF-8 format. You will get Exception if you don't convert your
	 * address in UTF-8 format. Perhaps google loves UTF-8 format. :) In
	 * parameter we also need to pass "sensor" parameter. sensor (required
	 * parameter) — Indicates whether or not the geocoding request comes
	 * from a device with a location sensor. This value must be either true
	 * or false.
	 */
	public GoogleResponse convertToLatLong(String fullAddress)
			throws IOException {

		
		URL url = new URL(URL + "?address="
				+ URLEncoder.encode(fullAddress, "UTF-8") + "&sensor=false");
		// Open the Connection
		URLConnection conn = url.openConnection();

		InputStream in = conn.getInputStream();
		ObjectMapper mapper = new ObjectMapper();
		GoogleResponse response = (GoogleResponse) mapper.readValue(in, GoogleResponse.class);
		in.close();
		return response;

	}


	/*
	 * Create an java.net.URL object by passing the request URL in
	 * constructor. Here you can see I am converting the fullAddress String
	 * in UTF-8 format. You will get Exception if you don't convert your
	 * address in UTF-8 format. Perhaps google loves UTF-8 format. :) In
	 * parameter we also need to pass "sensor" parameter. sensor (required
	 * parameter) — Indicates whether or not the geocoding request comes
	 * from a device with a location sensor. This value must be either true
	 * or false.
	 */
	public GoogleResponse convertFromLatLong(String latlongString)
			throws IOException {
		URL url = new URL(URL + "?latlng="
				+ URLEncoder.encode(latlongString, "UTF-8") + "&sensor=false");
		// Open the Connection
		URLConnection conn = url.openConnection();

		InputStream in = conn.getInputStream();
		ObjectMapper mapper = new ObjectMapper();
		GoogleResponse response = (GoogleResponse) mapper.readValue(in,
				GoogleResponse.class);
		in.close();
		return response;

	}

	public static String ResLat(String address) throws IOException{
		GoogleResponse res = new AddressConverter().convertToLatLong(address);
		if(res.getStatus().equals("OK")){
			for (Result result : res.getResults()) {
			return result.getGeometry().getLocation().getLat();
			}
		}
		return res.getStatus();
	}
	
	public static String ResLng(String address) throws IOException{
		GoogleResponse res = new AddressConverter().convertToLatLong(address);
		if(res.getStatus().equals("OK")){
			for (Result result : res.getResults()) {
				return result.getGeometry().getLocation().getLng();
				}
		}
		else{
			return res.getStatus();
		}
		return res.getStatus();
	}
	
	public static Coordinate ResCord(String address) throws IOException{
		GoogleResponse res = new AddressConverter().convertToLatLong(address);
		Coordinate cord = new Coordinate(BigDecimal.valueOf(0.0), null);
		
		if(res.getStatus().equals("OK")){
			for (Result result : res.getResults()) {
				cord.setLongitude(Double.parseDouble(result.getGeometry().getLocation().getLng()));
				cord.setLatitude(Double.parseDouble( result.getGeometry().getLocation().getLat()));
				return cord;
				}
		}
		else{
			return res.getStatus();
		}
		return res.getStatus();
	}
	
		
	
	public static void main(String[] args) throws IOException {
		
		String address = "2700 E Cary St, Richmond, VA 23223";
		Double latty = Double.parseDouble(ResLat(address));
		Double longy = Double.parseDouble(ResLng(address));
		//Coordinate coordy = new Coordinate(latty, longy);
		//Gets the latitude and longitude of the given address, then places those results into coordinate. 
		//can probably just make this another method to do this. ALL THE METHODS
		
		System.out.println("Given address's lattitude"+ResLat(address));
		System.out.println("Given address's Longitude"+ResLng(address));
		//System.out.println("The resulting coords: " + coordy);
		System.out.println("\n");
		

		String dress = ResLat(address)+","+ResLng(address);
		GoogleResponse res1 = new AddressConverter()
				.convertFromLatLong(dress);
		if (res1.getStatus().equals("OK")) {
			for (Result result : res1.getResults()) {
				System.out.println("address is :"
						+ result.getFormatted_address());
			}
		} else {
			System.out.println(res1.getStatus());
		}
	}
}