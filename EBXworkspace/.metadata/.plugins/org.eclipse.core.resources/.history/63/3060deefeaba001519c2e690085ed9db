<!DOCTYPE project>
<project name="The Store Module" default="reset-project" basedir=".">

	<property file="${basedir}/build.properties" />

	<target name="check-properties" description="Check the build properties">
		<checkpath path="${libraries}"             type="dir"  message="The 'libraries' build property is not valid: ${libraries}"/>
		<checkpath path="${libraries.servlet.jar}" type="file" message="The 'libraries.servlet.jar' build property is not valid: ${libraries.servlet.jar}"/>
		<checkpath path="${libraries.ebx.jar}"     type="file" message="The 'libraries.ebx.jar' build property is not valid: ${libraries.ebx.jar}"/>
		<checkpath path="${module.src}"            type="dir"  message="The 'module.src' build property is not valid: ${module.src}"/>
		<checkpath path="${module.webapp}"         type="dir"  message="The 'module.webapp' build property is not valid: ${module.webapp}"/>
		<checkpath path="${module.webapp.classes}" type="dir"  message="The 'module.webapp.classes' build property is not valid: ${module.webapp.classes}"/>
	</target>

	<target name="reset-project" description="Reset the project" depends="check-properties, clean-project, build-classes">
	</target>

	<target name="clean-project" description="Clean the project" depends="check-properties">
		<delete includeemptydirs="true">
			<fileset dir="${module.webapp.classes}" includes="**/*" defaultexcludes="no"/>
		    <fileset file="${module.war}" />
		</delete>
	</target>
	
	<target name="build-classes" description="Build the class files" depends="check-properties, clean-project">
        <javac destdir="${module.webapp.classes}" debug="on" includeantruntime="false">
        	<classpath>
        		<pathelement location="${libraries.servlet.jar}"/>
        		<pathelement location="${libraries.ebx.jar}"/>
        	</classpath>
		    <src>
		    	<pathelement path="${module.src}"/>
		    </src>
		</javac>
		<copy todir="${module.webapp.classes}">
		    <fileset dir="${module.src}">
		        <exclude name="**/*.java"/>
		    </fileset>
		</copy>		
	</target>

	<target name="build-war" description="Build the WAR file" depends="check-properties, clean-project, build-classes">
		<zip destfile="${module.war}">
		  <fileset dir="${module.webapp}"/>
		</zip>
	</target>

	<macrodef name="checkpath" description="Fail when the provided path does not exist">
	    <attribute name="path"/>
        <attribute name="type"/>
		<attribute name="message"/>
	    <sequential>
	        <fail message="@{message}">
	            <condition>
	                <not>
	                    <available file="@{path}" type="@{type}"/>
   				    </not>
			    </condition>
		    </fail>
	    </sequential>
	</macrodef>

</project>
